def strToInfix(inputString):
    tokens = []
    num = ""
    for char in inputString:
        if char.isdigit() or char == '.':
            num += char
        else:
            if num:
                tokens.append(num)
                num = ""
            if char in "+-*/()":
                tokens.append(char)
    if num:
        tokens.append(num)
    return tokens

def infixToPostfix(infixArray):
    precedence = {'+': 1, '-': 1, '*': 2, '/': 2}
    stack = []
    postfix = []
    for token in infixArray:
        if token.isdigit() or token.replace('.', '', 1).isdigit():
            postfix.append(token)
        elif token == '(':
            stack.append(token)
        elif token == ')':
            while stack and stack[-1] != '(':
                postfix.append(stack.pop())
            stack.pop()
        else:
            while stack and stack[-1] != '(' and precedence[token] <= precedence[stack[-1]]:
                postfix.append(stack.pop())
            stack.append(token)
    while stack:
        postfix.append(stack.pop())
    return postfix

def evaluatePostfix(postfixArray):
    stack = []
    for token in postfixArray:
        if token.isdigit() or token.replace('.', '', 1).isdigit():
            stack.append(float(token))
        else:
            b = stack.pop()
            a = stack.pop()
            if token == '+':
                stack.append(a + b)
            elif token == '-':
                stack.append(a - b)
            elif token == '*':
                stack.append(a * b)
            elif token == '/':
                stack.append(a / b)
    return stack[0]

def evaluateExpression(inputString):
    infixArray = strToInfix(inputString)
    postfixArray = infixToPostfix(infixArray)
    result = evaluatePostfix(postfixArray)
    return result

# Contoh penggunaan:
expression = "3 + 4 * 2 / ( 1 - 5 )"
result = evaluateExpression(expression)
print(f"Hasil dari ekspresi '{expression}' adalah {result}")
