import time
import random
import pandas as pd

# Bubble Sort
def bubble_sort(arr):
    n = len(arr)
    for i in range(n):
        for j in range(0, n-i-1):
            if arr[j] > arr[j+1]:
                arr[j], arr[j+1] = arr[j+1], arr[j]

# Insertion Sort
def insertion_sort(arr):
    for i in range(1, len(arr)):
        key = arr[i]
        j = i-1
        while j >= 0 and key < arr[j]:
            arr[j + 1] = arr[j]
            j -= 1
        arr[j + 1] = key

# Selection Sort
def selection_sort(arr):
    for i in range(len(arr)):
        min_idx = i
        for j in range(i+1, len(arr)):
            if arr[j] < arr[min_idx]:
                min_idx = j
        arr[i], arr[min_idx] = arr[min_idx], arr[i]

# Merge Sort
def merge_sort(arr):
    if len(arr) > 1:
        mid = len(arr) // 2
        L = arr[:mid]
        R = arr[mid:]

        merge_sort(L)
        merge_sort(R)

        i = j = k = 0

        while i < len(L) and j < len(R):
            if L[i] < R[j]:
                arr[k] = L[i]
                i += 1
            else:
                arr[k] = R[j]
                j += 1
            k += 1

        while i < len(L):
            arr[k] = L[i]
            i += 1
            k += 1

        while j < len(R):
            arr[k] = R[j]
            j += 1
            k += 1

# Quick Sort
def quick_sort(arr):
    if len(arr) <= 1:
        return arr
    else:
        pivot = arr[len(arr) // 2]
        left = [x for x in arr if x < pivot]
        middle = [x for x in arr if x == pivot]
        right = [x for x in arr if x > pivot]
        return quick_sort(left) + middle + quick_sort(right)

# Function to measure execution time
def measure_time(sort_function, arr):
    start_time = time.time()
    sort_function(arr)
    end_time = time.time()
    return (end_time - start_time) * 1e6  # Convert to microseconds

# Data conditions
def generate_data(size, condition='random'):
    if condition == 'random':
        return [random.randint(0, size) for _ in range(size)]
    elif condition == 'sorted':
        return list(range(size))
    elif condition == 'reversed':
        return list(range(size, 0, -1))

# Input sizes
input_sizes = [10, 100, 500, 1000, 10000]

# Algorithms to test
algorithms = [
    ("Bubble Sort", bubble_sort),
    ("Insertion Sort", insertion_sort),
    ("Selection Sort", selection_sort),
    ("Merge Sort", merge_sort),
    ("Quick Sort", quick_sort)
]

# Data conditions to test
data_conditions = ['random', 'sorted', 'reversed']

# Table headers
headers = ["Algoritma", "Kompleksitas Waktu", "N=10 (μs)", "N=100 (μs)", "N=500 (μs)", "N=1000 (μs)", "N=10000 (μs)"]

# Function to run tests and create the table
def run_tests():
    table = []

    for name, sort_function in algorithms:
        row = [name, "O(n²)"] if name in ["Bubble Sort", "Insertion Sort", "Selection Sort"] else [name, "O(n log n)"]

        for condition in data_conditions:
            row_condition = row.copy()

            for size in input_sizes:
                data = generate_data(size, condition)
                exec_time = measure_time(sort_function, data[:])
                row_condition.append(exec_time)

            table.append(row_condition)

    return table

# Running the tests
result_table = run_tests()

# Convert to DataFrame for better visualization
df = pd.DataFrame(result_table, columns=headers)

# Display the table
print(df)
