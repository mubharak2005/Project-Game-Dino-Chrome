import tkinter as tk
from tkinter import messagebox

class User:
    def __init__(self, username, password):
        self.username = username
        self.password = password

class Cake:
    def __init__(self, name, price, description):
        self.name = name
        self.price = price
        self.description = description

class Order:
    def __init__(self, user, cake, flavor, size):
        self.user = user
        self.cake = cake
        self.flavor = flavor
        self.size = size
        self.total_price = self.calculate_total_price()

    def calculate_total_price(self):
        size_multiplier = {'Small': 1, 'Medium': 1.5, 'Large': 2}
        return self.cake.price * size_multiplier[self.size]

class BakeryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Hammer Bakery")
        self.users = []
        self.cakes = [
            Cake("Chocolate Cake", 100, "Delicious chocolate cake"),
            Cake("Vanilla Cake", 90, "Classic vanilla cake"),
            Cake("Strawberry Cake", 110, "Sweet strawberry cake")
        ]
        self.current_user = None
        self.main_frame = tk.Frame(root)
        self.main_frame.pack()
        self.create_login_frame()

    def create_login_frame(self):
        self.clear_frame()
        tk.Label(self.main_frame, text="Username").grid(row=0, column=0)
        self.username_entry = tk.Entry(self.main_frame)
        self.username_entry.grid(row=0, column=1)

        tk.Label(self.main_frame, text="Password").grid(row=1, column=0)
        self.password_entry = tk.Entry(self.main_frame, show='*')
        self.password_entry.grid(row=1, column=1)

        tk.Button(self.main_frame, text="Login", command=self.login).grid(row=2, column=0)
        tk.Button(self.main_frame, text="Register", command=self.register).grid(row=2, column=1)

    def create_catalog_frame(self):
        self.clear_frame()
        tk.Label(self.main_frame, text="Katalog Kue").grid(row=0, columnspan=3)
        row = 1
        for cake in self.cakes:
            tk.Label(self.main_frame, text=f"{cake.name} - {cake.price} - {cake.description}").grid(row=row, columnspan=3)
            row += 1

        tk.Label(self.main_frame, text="Pilih Kue:").grid(row=row, column=0)
        self.cake_choice = tk.StringVar()
        self.cake_choice.set(self.cakes[0].name)
        cake_menu = tk.OptionMenu(self.main_frame, self.cake_choice, *[cake.name for cake in self.cakes])
        cake_menu.grid(row=row, column=1)

        tk.Label(self.main_frame, text="Pilih Rasa:").grid(row=row+1, column=0)
        self.flavor_choice = tk.StringVar()
        flavor_menu = tk.OptionMenu(self.main_frame, self.flavor_choice, "Chocolate", "Vanilla", "Strawberry")
        flavor_menu.grid(row=row+1, column=1)

        tk.Label(self.main_frame, text="Pilih Ukuran:").grid(row=row+2, column=0)
        self.size_choice = tk.StringVar()
        size_menu = tk.OptionMenu(self.main_frame, self.size_choice, "Small", "Medium", "Large")
        size_menu.grid(row=row+2, column=1)

        tk.Button(self.main_frame, text="Pesan", command=self.order_cake).grid(row=row+3, columnspan=2)

    def create_confirmation_frame(self, order):
        self.clear_frame()
        tk.Label(self.main_frame, text="Konfirmasi Pesanan").grid(row=0, columnspan=2)
        tk.Label(self.main_frame, text=f"Pelanggan: {order.user.username}").grid(row=1, columnspan=2)
        tk.Label(self.main_frame, text=f"Kue: {order.cake.name}").grid(row=2, columnspan=2)
        tk.Label(self.main_frame, text=f"Rasa: {order.flavor}").grid(row=3, columnspan=2)
        tk.Label(self.main_frame, text=f"Ukuran: {order.size}").grid(row=4, columnspan=2)
        tk.Label(self.main_frame, text=f"Total Harga: {order.total_price}").grid(row=5, columnspan=2)
        tk.Button(self.main_frame, text="Konfirmasi", command=lambda: self.show_receipt(order)).grid(row=6, columnspan=2)

    def show_receipt(self, order):
        messagebox.showinfo("Struk Pembelian", f"Terima kasih telah memesan, {order.user.username}!\n\nKue: {order.cake.name}\nRasa: {order.flavor}\nUkuran: {order.size}\nTotal Harga: {order.total_price}")
        self.create_catalog_frame()

    def login(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        user = next((u for u in self.users if u.username == username and u.password == password), None)
        if user:
            self.current_user = user
            self.create_catalog_frame()
        else:
            messagebox.showwarning("Login Gagal", "Username atau password salah!")

    def register(self):
        username = self.username_entry.get()
        password = self.password_entry.get()
        if not username or not password:
            messagebox.showwarning("Input Error", "Username dan password harus diisi!")
            return
        if next((u for u in self.users if u.username == username), None):
            messagebox.showwarning("Registrasi Gagal", "Username sudah terdaftar!")
            return
        new_user = User(username, password)
        self.users.append(new_user)
        messagebox.showinfo("Registrasi Berhasil", "Registrasi berhasil! Silakan login.")
        self.create_login_frame()

    def order_cake(self):
        selected_cake = next(cake for cake in self.cakes if cake.name == self.cake_choice.get())
        flavor = self.flavor_choice.get()
        size = self.size_choice.get()
        if not flavor or not size:
            messagebox.showwarning("Input Error", "Rasa dan ukuran harus dipilih!")
            return
        new_order = Order(self.current_user, selected_cake, flavor, size)
        self.create_confirmation_frame(new_order)

    def clear_frame(self):
        for widget in self.main_frame.winfo_children():
            widget.destroy()

if __name__ == "__main__":
    root = tk.Tk()
    app = BakeryApp(root)
    root.mainloop()
